// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/schema.json (32.114kB)

package v1alpha5

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xeb\x8f\xdb\x38\x92\xff\x9e\xbf\x82\xe8\x59\x60\xef\x16\xdd\xee\xcd\x01\x7b\x77\x08\x16\x0b\x38\xee\x9e\x8c\x31\xe9\x8e\xd1\xce\xcd\x01\xbb\xd8\x0f\x65\xa9\x6c\x73\x9a\x22\x35\x24\xe5\x6e\x67\x90\xff\xfd\x40\x52\x92\xf5\xa0\x64\x3d\xdc\x8f\xec\xe5\x43\x80\xb4\x24\x16\x59\xaf\x5f\x55\xf1\xe5\xdf\xdf\x10\x72\xf6\x07\x89\xeb\xb3\x77\xe4\xec\x87\xcb\x10\xd7\x94\x53\x4d\x05\x57\x97\x33\x96\x28\x8d\x72\x26\xf8\x9a\x6e\xce\xce\xcd\x87\x7a\x1f\xa3\xf9\x50\xac\x7e\xc5\x40\xbb\x67\x7f\x50\xc1\x16\x23\x30\x8f\xb7\x5a\xc7\xef\x2e\x2f\x7f\x55\x82\x5f\xb8\xa7\x17\x42\x6e\x2e\x43\x09\x6b\x7d\xf1\xe7\xff\xba\x74\xcf\x7e\x70\xed\x0a\x5d\x9d\xbd\x23\x66\x1c\x84\x9c\x65\x7d\x32\x91\x84\xff\x0b\x3a\xd8\xe6\xaf\x08\x39\x8b\xa5\x88\x51\x6a\x8a\xaa\xf0\x94\x90\xb3\xc0\x35\xfa\x28\x36\x1b\xca\x37\xa5\x77\x47\x99\xcb\x3b\xca\x5a\xe7\x4d\xbf\xa6\xff\xfb\x7a\x7e\xe8\x1f\xd7\x28\x25\x86\x9f\x64\x88\xf2\xec\x1d\xf9\x47\xe3\x18\xd2\x17\xff\xcc\xdb\x42\x18\xda\x9e\x81\x2d\x8a\x5c\xac\x81\x29\x7c\x53\xe8\xa6\x2e\x81\x3a\x5b\x8d\x82\x40\x0e\x2b\x86\x9f\xf7\x71\xe5\x05\x21\x67\x54\x63\x54\x7d\x58\x50\xa8\xd2\xb2\xc4\x7c\x81\xed\xd2\x77\x20\x25\xec\x87\xca\xa8\x38\xbc\xf1\x02\x72\x66\x59\x90\x8a\xc4\xdf\x12\x2a\x31\x2c\x77\x1a\xa1\x86\x10\x34\xd4\x7b\x6c\x92\x22\xc4\xf4\x17\x94\x8a\x0a\x5e\x15\x62\x45\x5a\x25\x09\x3d\x5e\x50\xae\x91\x31\xfa\xeb\xc5\x56\x47\xec\x22\x44\x15\x48\x1a\x6b\x47\xc6\x59\x3b\x2a\xa2\xb7\x48\x76\x8e\x3a\x86\xc4\x39\x04\x11\x6b\xa2\xb7\x54\x11\x89\xb1\x44\x85\x5c\x83\x69\x66\x1e\x03\x27\xce\xd7\x26\x64\x89\xd2\x34\x24\x6a\x2b\x12\x16\x92\x40\xf0\x1d\x4a\x4d\x24\x06\x62\xc3\xe9\x97\x9c\x9a\x22\x5a\xd8\x6e\x18\x68\x54\x9a\x98\x61\x49\x0e\x8c\xec\x80\x25\x78\x4e\x80\x87\x24\x82\x3d\x91\x68\xe8\x92\x84\x17\x28\xd8\x4f\xd4\x84\xdc\x08\x89\x84\xf2\xb5\x78\x47\x8c\x4f\xab\x77\x97\x97\x1b\xaa\x27\xf7\xff\xad\x26\x54\x5c\x06\x22\x8a\x12\x4e\xf5\xfe\x32\x10\x5c\x4b\xba\x4a\xb4\x90\xea\x32\xc4\x1d\xb2\x4b\x45\x37\x17\x20\x83\x2d\xd5\x18\xe8\x44\xe2\x25\xc4\xf4\xc2\x0e\x96\x5b\xcf\x9b\x44\xe1\x0f\x12\x95\x48\x64\x80\xaa\x2c\x42\x7c\x84\x28\x66\x56\x1d\xff\x28\x9b\x29\xde\xab\x40\x33\xd3\xf7\xee\x2d\xb0\x78\x0b\x7f\x29\x9a\xea\x3f\xdf\x78\x8c\xf6\x0c\x76\x40\x19\xac\x28\xa3\x7a\xff\x77\xc1\x9f\xcd\x25\xce\x8b\xa0\xe0\x81\x31\xd2\x03\x94\xfc\x64\xd7\x20\x37\xa0\x71\x21\xc5\x9a\xb2\xce\x7c\xf9\xbb\xfc\xb1\x44\x6b\x14\xb7\x1b\xaa\xbb\xb1\xf9\x81\x6a\x3f\x05\x0a\x51\x2f\x41\xcd\xa7\x37\x7e\x42\xf7\x94\x87\x27\x74\x5e\x20\xae\x91\xf3\x8f\x83\x9b\x9a\x47\xc6\xd3\xee\xae\x97\x9f\x49\x66\xd4\xce\x95\x9d\xd7\x1e\x3e\x55\x07\x07\x36\xce\x47\xf9\x1a\xa5\xfb\x72\x2d\x45\x64\xa9\x20\x0f\x63\x41\xb9\xb6\x7f\x04\x8c\x22\xd7\x44\x25\xab\x88\x6a\x83\x0c\xbf\x25\xa8\xb4\xf1\xed\x09\x99\x01\xe7\x42\x93\x15\x92\x24\x0e\x41\x63\x38\x21\x73\x4e\x66\x10\x21\x9b\x81\xc2\x27\x77\x5f\x23\x49\x75\x61\x64\xdc\xd9\x81\xcb\xa0\x7d\xd4\x77\x23\xe0\xb0\xc1\xf0\x56\x84\xf8\x41\x8a\x24\x1e\x67\xe3\x37\x15\x6a\xa3\xac\x3c\x8f\x27\x7d\x0c\xf5\x06\x0f\x01\xa8\x4c\x8e\x9f\x86\xc5\xd3\xf0\xa6\x30\x90\xa8\xd5\x35\x0f\xe4\x3e\x33\xfe\x0e\x4c\x2e\x6b\xcd\xfc\xd4\x35\xe8\xa4\xc6\x66\xab\xdc\x96\xae\x89\x97\xdc\x2e\x0e\x7a\xd1\xfa\x65\x31\x1b\x9a\xb8\x58\x38\x39\xf7\x66\x08\x3e\xcb\xa8\x20\x5a\x65\xcc\x7e\xe5\xb7\x1a\x7f\x0b\xf6\xb7\x06\x3c\x7f\x28\x6a\x55\x78\x5d\x5f\x15\x84\x3f\x51\xe2\xf6\x91\x2a\xdd\x25\xa5\xfd\x9e\x8c\xfd\x4b\x24\x63\x66\x6c\x94\x27\xd8\x47\x89\x15\xa5\x65\x24\xac\xbc\x56\x48\x14\x6a\x42\xd7\x56\xb8\x89\x42\x69\xff\x06\xc2\x68\x44\x35\x11\xdc\x3e\xe7\x49\xb4\x42\x69\x54\x67\xc1\x94\x48\xd4\x89\xe4\x18\x3a\xb9\x53\x1e\xd2\xc0\xa8\x85\xe8\x2d\xb8\xa8\xab\xac\x5a\xc9\x16\x14\x89\x8c\xd4\x8d\x3b\x93\xd4\xaf\x18\x4e\xc8\x67\x63\x30\x36\x07\x30\x21\x3e\x86\xdf\x12\xcc\x55\xb8\xb2\xe3\x08\x8d\xc2\xa9\x52\xf6\x85\xd0\x5b\x94\x59\xec\xce\x2c\xa1\x10\xe6\x41\xbb\x1e\x43\x67\x71\x8c\xba\xaf\x24\x6a\x49\x71\x87\x8e\x07\x7c\xd4\x96\x37\x63\x80\xd9\x48\x52\x3b\x54\x13\x32\x73\x52\x31\x99\x08\x18\x33\x54\x54\x69\x93\x38\x58\x5a\x66\x58\x69\xa6\x10\x0b\xa5\xa8\x69\x99\x8a\x2c\xe5\x34\xb0\xce\x98\x48\x67\xe3\x86\xef\x60\x0b\x7c\x83\x21\x11\xd2\x89\x40\x6f\x81\x13\x20\x6b\x7c\x20\x11\xe5\x89\x11\xd7\x16\x76\x48\x62\x50\xca\x64\x1e\x46\x24\x99\x09\xa5\x9e\x4a\xd6\x14\x59\x98\x4b\x9b\x3c\x6c\x91\x93\x44\xb9\x6c\x89\x2a\x92\x6b\xd2\x89\xf2\x81\x32\x66\x86\x48\x43\x63\x95\x01\xb0\x4c\x52\xa9\xa4\x9d\x2e\xd7\x54\x2a\xe3\x60\x2a\x16\x5c\xe1\x39\x49\x38\x43\xa5\xc8\x5e\x24\x6e\x3c\x12\x03\xa4\xb9\x28\xb5\xb8\x47\xee\x52\x2b\xe0\x04\xa5\x34\xec\xa0\x52\xb0\xc1\x49\x2f\xa8\xf8\x6e\x75\xdf\xad\xee\x34\x56\xe7\xaf\x78\x3c\x49\x5e\xbf\xcc\xaf\x31\xb3\xee\x9d\xfd\x7d\x2f\x9a\xbe\xed\xa2\x49\x62\x04\x94\x53\xbe\x99\x6b\x8c\x66\x22\xe1\xb5\x72\x3c\xd3\xa6\xd1\xdb\x06\x65\x6b\xb8\xad\x53\x33\xe8\x53\xc6\x37\x95\xac\x94\x91\xb1\x79\x67\xa1\x2e\xf5\x1a\x0b\x03\x0f\x5b\x1a\x6c\x09\x48\xb4\x60\x40\x79\xc0\x92\x10\x43\xf7\x49\x06\x3b\x99\x63\x4d\xc8\x7c\x7d\x68\x99\x41\x97\x91\x34\x50\xe3\xcb\x0c\x56\xc8\x0c\x38\x38\x1f\x57\xc8\x30\x30\xf2\x3f\x37\x8d\xaa\xa8\x9b\x8f\x3c\x1b\x94\x22\x09\xbf\xe7\xe2\x81\x5b\xd4\x74\x6e\x6d\xc8\x64\x10\xc0\x70\x6d\x52\x2f\x0b\xe5\x3c\x24\x22\xa2\x5a\x63\x48\xc2\xc4\x9a\xaf\x42\x49\x81\xd1\x2f\x16\xac\xca\x03\xb5\xa8\x62\x94\xa7\x91\xfc\x1b\x52\x8b\xbb\x2b\x0c\x20\x51\x48\xa8\x7d\x6d\x58\x0f\xb6\x09\xbf\x37\x94\xc4\xe1\xad\x15\x41\x2a\x4f\x06\x2a\xfd\xe8\xdf\x0f\xfc\x48\x4c\x45\xe7\xf0\xb0\xca\x93\x63\xc4\x38\xc2\x70\x4e\x32\xd7\x12\x2c\xb4\x6e\x05\x9c\xec\xde\x4e\xde\xfe\x85\x84\xc2\x8e\xdb\x50\x39\xf4\xe1\x30\xd7\x58\x0e\x37\x6a\x34\x4c\x08\x27\x0a\xbf\xa5\xfc\x09\x95\xa6\x11\x18\x77\xff\x93\xc3\x7e\xfa\xc5\x36\x31\x01\x83\x19\xfd\xd9\x41\xcc\xac\xcb\xe6\x89\xb4\xe9\x57\x22\xdb\x67\xb1\xd4\x43\x5b\x8b\x2c\x0e\x0b\x99\xfe\x81\x8f\x10\xe8\x7e\x71\xfd\xbb\x79\x7f\x37\xef\x31\xe6\xfd\x57\x8c\xfe\x76\xb0\xf0\xbf\x5e\x62\xf4\xb7\x67\xb2\xf2\x06\xec\x2f\xe5\x42\x23\xca\xac\xa5\x0b\xda\x36\x4d\x74\xb9\xd1\x9a\xa6\xa5\xb2\xcb\xde\xfe\xa8\x0a\x55\x6c\x9a\x7a\x65\x35\x73\x1a\xc0\x6d\xe3\x00\x78\x9e\x9d\xae\xf6\x69\x6c\xb6\xf5\x70\x88\x1a\x65\x44\x39\xba\x1c\x2d\xcd\x2a\x5d\x42\x95\x26\x82\x13\xf2\x8b\xcd\x1a\xa2\x44\xd9\x98\xad\x25\x9a\x98\x4d\x20\x4f\x80\x0b\x24\x8d\x2d\xb8\xc4\x90\x24\x3c\x12\xa1\x19\x71\x48\x56\x10\xdc\x67\x39\x9d\x1b\xf9\x84\x2c\x44\x9c\x30\x4b\x68\xb5\x77\x2f\xf6\x4a\x63\x34\x21\x77\x08\xe1\x85\xe0\x6c\xff\xe4\x79\x40\x20\x78\x90\x48\x89\x3c\xd8\x5f\x58\x12\x82\x5d\x00\x0f\x2f\xf2\x2c\x3a\xd8\xf7\x02\xb2\xef\xfa\x7a\x79\x7d\x35\x4c\xa6\xb2\xf5\x47\xca\xef\x47\xf8\x62\x46\xc2\x00\x0e\x90\xff\xb9\xfb\x58\xcd\xa2\x73\x15\x76\x13\x15\xb9\xba\x5e\xdc\x5d\xcf\xa6\x9f\xaf\xaf\xc8\xcf\xc9\x0a\x25\x47\x53\x59\x59\x78\x55\x5a\xc4\x24\x96\x22\x86\x0d\x1c\xa8\x3b\xfc\xa5\x9c\xbc\x9d\xfc\xc7\x9f\x0d\x66\x21\x28\xac\xc4\x19\xaa\x48\xcc\x80\x73\x57\x85\xae\x2c\x9c\x89\x1d\x66\xcd\xde\x66\xcd\xfa\x05\xe8\x7f\x35\xde\x9f\x74\xea\x39\xb7\xb5\x96\x90\xe0\x9b\x8d\x6b\xaf\x1e\x6a\x75\xea\xe8\xb9\xdf\xeb\xb4\x5a\x53\x5d\xa6\x7e\x63\x49\x77\xa0\x71\x1a\x04\xa8\x6a\x35\x72\xe6\x45\x2b\x21\x18\x42\xc3\x8a\x43\x9c\xac\x18\x0d\xfa\x12\xe8\xa5\x9f\xf2\x20\x9b\xfa\xee\x25\xb8\xfc\xa3\x8a\x47\x6c\x05\x0b\x15\x49\x37\x9a\x10\x88\x69\x36\x9d\x92\xd7\xc0\x60\x7b\xb3\x60\x28\x23\x28\xcd\xe7\x1f\x73\xb7\x41\xc4\x7d\x2a\x9e\x4f\x6f\xba\x28\x37\x5b\xc7\x10\xe1\xf5\x23\x06\x89\x21\x77\x27\x18\x4e\xef\x6e\x8f\xe0\xa5\x57\xd1\x0d\xd4\x16\x26\x6c\x29\x63\xfd\xea\xbd\x48\x78\x08\x72\x3f\x84\xba\x91\x04\x0d\x8c\x8e\x8d\x5b\x9c\x64\xba\x66\x3e\xbd\x59\x96\xa8\x8e\x5c\xb7\xb3\xa4\x46\x08\xb0\x40\xe1\x44\x42\x7b\xa0\x7a\xfb\x69\x7e\x35\x7b\x22\xbf\xab\xb0\xdc\x9d\x95\xe3\x56\x53\xa1\xd7\xc3\xb6\x7c\xec\xb7\xd8\xd1\x68\x38\xad\x5b\x51\x97\x15\x35\xce\x85\x5b\xd3\xaa\x59\x72\x43\xff\x23\x37\xc8\x14\x36\x0b\xe6\xef\x42\x5c\x43\xc2\xcc\x78\xcf\x7e\xff\xea\x37\x20\xd0\x1a\x82\xed\x42\x30\x1a\xd4\x0c\xd0\xef\x5b\x73\xce\x28\xc7\x2b\x11\x24\x11\xf2\x86\x2d\x26\x45\xaa\xd3\xbb\xdb\x17\xd8\x14\x64\x8b\xfd\xd7\x2d\x7a\x0e\xd1\xb1\x95\xba\xc6\x76\x2a\x86\x60\x50\xe3\xf8\x44\x60\xdd\x7f\x97\x41\xcd\x8d\xda\xb6\x1d\x68\xd8\xbc\x42\xe5\xf5\xc2\x4e\xab\x5e\xaf\xda\xea\x66\x7a\xee\x07\x8e\x36\x8f\x6a\xf2\xe1\x23\xba\x6e\xdd\x79\x60\xa5\x7e\x7a\xbc\x5c\x56\x8d\xa5\x11\x35\x65\xcf\xd8\xda\x4b\x21\x19\xf1\xd1\x0c\xda\x7d\x46\x47\xb7\xc4\x56\xf5\x2f\x71\x53\xd8\xb4\x73\x7c\x83\xec\x50\x78\x48\xfb\x19\xd0\xf2\x75\x3a\x5d\x71\x63\x4f\xa7\x79\xb7\x13\xf9\x6b\x2a\x47\x4f\xf7\x27\xf7\x98\xdb\xe9\xe7\x2e\xde\x61\x12\xa4\x07\xe8\x8e\xd7\xbd\xd8\xcf\x88\xf7\x62\xa6\xbd\x88\xba\x9d\x7e\x26\x29\xd9\xca\x62\xb4\x88\xcb\x00\xd7\xad\x6e\x3a\x4e\xcf\x27\xdc\x85\x14\x3b\xea\xd8\xfd\xbd\xf2\xaa\x3b\x30\x81\x1c\xe4\x51\x81\xa1\xb5\xb6\x3b\x11\xa6\x89\xde\x0a\x49\xf5\xfe\xca\xb3\xad\xf1\xe9\xf3\xa1\xac\xc0\x1c\x18\xec\x83\xfb\xdb\x3e\x70\xd4\xcb\xf2\xf2\xa1\x75\x11\xdc\x79\x59\x27\xde\x51\x8e\xf6\xc7\x65\xb2\xe2\xd8\x6b\xfa\x64\x18\x6c\x36\xec\x32\x45\xfd\x20\xe4\xfd\x93\xa1\xa8\x9b\x33\x79\xf5\x23\xee\x65\x43\x99\x1a\xea\x6c\x9e\x10\xcf\xd2\x4e\xdc\xcc\xba\xa5\x4e\x54\x6a\x29\xfd\x80\xac\x85\x90\xcf\x1c\x7f\x59\xcc\x3a\x61\x54\xa2\xc5\x94\x31\x61\x9c\x66\xbe\xd8\xfd\xe7\xa0\xc9\xbc\x80\x86\x45\xa4\x74\xcf\x9a\xa7\x15\x5b\x8c\xa2\x36\x19\xe9\xc7\xa5\x47\x2d\x61\x36\xbf\xba\x6b\xae\x11\xdb\xb0\xae\x6d\x5e\x7f\x2d\x24\x39\x28\x9b\x98\x4e\x08\x28\x25\x02\xea\xd2\xeb\x73\x82\x93\xcd\x84\x68\x61\xd7\x21\x1f\xa8\xde\x12\x85\x31\x48\xa3\x19\xfb\xb1\x21\x90\xa9\x2a\xd5\x0f\x31\x34\xf9\x9e\x40\x78\xb1\x15\x75\xf5\x77\x31\x81\x67\x1c\x96\x57\xe2\xf4\xd8\xf6\x23\x6f\x2b\x0e\x1d\x8f\x9d\x14\x52\x9a\x16\xf4\x71\x33\xb6\xed\x7a\x7f\xb2\x58\xa8\x30\x48\x4c\x40\x71\x5b\xf9\x87\x04\xc4\x2d\x48\xb7\x75\x7c\xd9\x83\xd4\x31\x5b\x8d\x25\x5e\xb8\x3d\xd3\x21\x71\x3d\x10\x2e\x42\x24\xcb\x0f\xbd\xed\xab\x85\x94\x9f\xa1\x5a\xc0\x3b\xae\xe1\xa5\xcf\xf6\xab\xcb\x4b\xa9\x79\x82\x44\x92\x6e\x6d\x48\xf1\xae\x60\xc3\x66\xc0\x75\x53\x37\xe3\xdd\xd8\x8d\xf9\x44\x6f\x51\xb9\x9d\x0c\xf7\xb8\x77\xcb\x4f\xd3\xbf\xdb\x66\x6e\x15\x91\x22\x2f\x55\xd5\x1d\x96\xbd\x9e\x71\x5c\x03\x23\x1a\x2d\x2d\x48\x59\x58\x6e\x34\x61\x8f\x26\xfd\x10\xdb\xc1\x86\xcf\x5b\x02\x4a\x05\x0f\xda\x42\x44\xab\xc7\x9f\x30\x26\x6f\x98\x58\x01\x4b\x11\xcf\x06\x54\x60\x8c\x04\x5b\xca\xb2\xd0\x7a\x59\xc6\xca\x9e\xa1\xba\x3f\xfd\x52\x04\xaf\x1c\xfc\xeb\x36\x69\x50\x13\xcf\x88\x29\x82\x36\xef\x4c\xb7\xde\xa4\x63\x24\xb1\x1b\x64\xbf\x05\xe4\x26\x1a\x7e\xec\xef\xbd\x0e\xd5\x36\xfc\xf9\xf4\x86\x48\xc1\xf0\x8f\x8a\x4c\xef\x6e\xb3\x80\xa9\x05\x91\x09\x27\xb1\x08\x15\x11\x5c\x8b\x6c\x68\xfd\xd8\xea\x4b\xbb\x21\xce\xa4\x3b\xcc\x4e\x78\x76\x74\x99\xd2\xec\x1a\x00\xdb\x04\xe8\x22\x84\xdb\x1b\x95\x30\xb4\xbb\x50\xdc\x98\x89\x49\xe7\x99\x00\xbb\xde\xae\x82\x2d\x86\x09\xc3\x11\xe2\x1c\xd7\x53\x9f\x90\x75\xd2\xec\xa1\x4d\x78\x6e\x67\x62\x66\xf7\xe9\x96\xb3\xd4\x48\x42\x41\xb8\x2b\x89\x48\xcc\x20\xc0\x08\xb9\xce\x36\xba\x39\xb6\x31\xcc\x19\xb7\xbb\x01\xb9\xe0\xd6\x79\x76\x34\xb4\x47\x18\x18\xcb\x53\x3b\x13\x4f\xdc\xb6\x6b\xb7\x6a\x9c\x6d\xd3\x4b\x14\x86\xfd\xb4\xf0\x4a\x86\xec\x55\xe7\xeb\x9c\x7b\xec\x15\xb1\xab\x13\x88\x3e\xb4\xf3\xa2\x43\x7b\xf8\x1e\x39\xc5\xd8\x00\x1f\x9d\x22\x91\x5b\xae\xe8\x1c\x8e\x5e\x7e\xcd\xad\x64\xee\x85\xfd\x47\x6e\xeb\x6f\x2e\xf1\x02\x9e\x57\x50\xa8\x9f\x43\x9d\xa0\x87\x8e\xeb\x84\x5d\xd6\xfb\x3a\xca\x22\x27\xe7\x8e\x77\x38\x50\x38\xa1\x24\x3a\xd3\x1f\xe1\x66\x4d\xeb\x68\xc3\xdd\xe4\x03\xed\xb4\xac\xbf\x12\x42\x2b\x2d\x21\xae\x67\x74\xa4\x39\x84\xd7\xee\x7d\x28\xaa\xd7\x74\x04\x65\x97\x6c\x21\xf5\x29\xfb\xda\x4b\x4b\x62\x2c\xba\xd1\xb9\x33\x5f\x0e\xd4\x80\xed\xc5\xc7\xc1\x79\x8b\xa0\x86\xab\xa6\xb2\xe1\xa0\xa0\xa5\x26\x68\x39\xb0\xd1\x00\x17\x3e\xb7\xcb\xba\xab\xdd\x63\x70\xe2\xa4\x1d\x22\xfa\x23\x44\x94\x0d\x5a\x77\x7f\x05\xd7\xad\x84\xa8\x8c\x08\x66\x10\x43\x40\x75\x23\x17\xd9\xe9\x27\x2f\x8d\xce\x57\x90\xe4\x5a\x68\xbc\x84\x84\x72\xa5\x81\x07\xf6\xc2\xa3\x21\x12\x7d\xf9\xa0\x75\x34\x00\x44\xf0\xb8\xa4\x5f\x1a\xb9\x6b\x95\x74\x44\xf9\xe0\xb6\x43\x57\xa0\xd3\x82\x38\x5d\x15\xf0\x5c\x16\x56\x9d\x89\x6e\x12\x88\xc5\x82\x86\xf4\x5f\x75\xbc\xed\x27\xb7\xa0\xe5\xf2\xa7\x6f\x29\xf5\x2c\xae\x3b\x0b\x96\x44\xd8\x4f\x8d\xa3\x32\xd7\x03\x44\x35\x39\x5a\x0b\x1e\x78\x8c\xcf\x63\xcb\x7e\xf6\x5a\x91\xae\xa2\xfd\xba\x0f\xb7\x9a\x60\x55\xe1\x15\x34\x1a\x1e\x9e\x6e\x50\x4b\x1a\xa8\x59\x7e\x10\xe9\x78\xc0\xd8\x48\xe0\x09\x03\x69\xc4\xd5\x39\x6e\x14\x1b\x0d\x70\xca\xc8\x0d\xf3\x99\xe2\x45\x2f\xf3\x2b\x72\xe6\x19\xf1\x70\xd5\x3c\x65\x0c\x1f\x14\xbd\x47\x85\x7e\xb5\x69\x33\xb5\x36\x6d\x36\x5c\xd8\x54\xa3\x36\x26\x2d\x78\x05\x99\xc9\x4a\x68\xcd\x50\x8a\xe0\x1e\x3b\x2e\x56\xe5\x06\xf2\xbe\xd8\xd4\x4b\x3c\x60\xa0\x14\x0d\x3e\x0a\x08\xdf\x03\x33\x40\x28\x6f\x4d\x25\xf2\xfc\x6c\xa6\xb3\x2a\x57\xb7\xcb\x21\x66\x74\x8a\xf4\x0d\x57\xea\x53\xac\x69\x44\xbf\x60\xe3\x62\x62\xeb\x2a\xf3\x13\xe4\x7f\xbd\xf6\xa7\x78\xda\x2f\x24\xae\xe9\xe3\x18\x0a\x43\x33\xd0\xac\xbd\xba\xa2\xca\x9d\x9d\xeb\x7c\x27\xd8\x41\x3c\x5e\x1a\xde\xee\xee\x93\x15\x32\xd4\xd7\x76\x55\xa8\x7a\xbd\x67\x4b\x5f\x5d\xf6\x7d\x7f\x1b\xc9\xf4\x42\x84\x6a\x81\xd2\x08\x6f\x58\x4e\xfd\x8d\xe5\xe3\x62\x87\x52\xd2\x10\xdf\x67\x35\xf9\x4c\x44\x11\x1c\xbd\x86\xc4\x4b\x2b\x96\x35\x32\x2f\x00\x81\xcf\x52\x61\x14\x97\x45\x3b\x2e\x8d\x1f\x8a\x8d\x0f\x0d\xbb\x2f\xfe\x3f\xd5\x2d\x1a\x7c\xbb\x85\x5e\xd9\x10\xe5\x06\xb5\x95\xf3\xcb\x9c\x53\x71\xc5\x4f\x7a\x35\xe0\xc0\x68\xea\x68\xcc\x3f\x2d\x1a\x13\x82\x56\x58\x71\xcd\x7f\x8e\xd4\xcf\xb8\x9f\x5f\x0d\x01\x05\x47\x61\x68\x04\x1e\x52\xde\xd6\x9a\xf7\x0a\xbe\x6f\x2a\x54\xfa\x16\xc7\x83\x6b\x65\x7f\xa8\x6f\xce\x46\x9a\xf2\x9c\xae\x75\x72\xb5\xd2\x6d\x2d\x8b\x2b\x80\x77\xca\x12\xdf\x5b\xbb\x34\x25\x94\x47\xa7\x06\x0a\x1a\xf7\x1b\x61\x8b\x7f\x35\xdb\xbd\xdf\xa1\x9a\x33\x87\xd6\xf9\x87\x14\xfa\xba\xd4\x0f\x2d\x68\xd4\x3c\xe3\x51\xb9\xf1\xb4\x54\xf9\x1c\x8b\xd6\x5d\x32\x03\x7f\xb9\xd1\x9e\x45\xa6\x2f\xc7\xd4\xe9\xef\xfd\x15\xdc\x91\xab\xf8\xa7\x61\x44\xf9\x2c\xbd\xe7\xa7\xb6\x8e\xd2\x09\x42\x15\x6a\x4d\x79\x3d\x9e\xf6\x4c\x85\x7b\x01\x8b\x77\xf0\xbe\x31\xf5\x12\x6c\xfe\x91\x77\x3b\x93\x5d\x95\x2f\x1d\x9d\x58\x0b\x49\x8a\x62\x27\x2b\x50\x18\x92\xc3\xbd\xb8\x93\x9e\x3b\xa6\x06\x75\xe1\x37\x87\x8e\xa7\xdc\x5f\xfe\xb4\xe9\x01\xb6\xed\x62\xd7\xc0\xe3\xe1\x19\x95\x11\x27\xcc\x8b\x24\xc6\x56\xc4\x27\x3e\xa6\x3e\x0d\x43\xc1\xad\x92\xea\x09\x5f\x87\xea\xbf\xdc\x7c\xa0\xcb\xb5\x9d\xa2\xf4\xe8\xb0\x45\x37\x6d\x32\xef\x21\xcb\x56\x19\x9d\xd0\xef\x81\x31\x32\x9f\xde\x10\xd0\x2e\xed\x40\xe5\xae\xcf\x3a\xcc\x90\xf6\x73\xf2\xe3\xf4\x1a\x3d\xba\xc9\x0e\x9a\xdd\x9b\xad\xe6\x7c\x23\x87\x5e\x4f\x02\x71\x7c\x83\xf5\xaa\xab\x5b\xdb\x44\x8b\x65\x00\x6c\x60\x54\x09\x50\x6a\xb7\x9c\x3c\xb0\x7d\xe3\x2f\x5b\x74\x6a\x8e\xab\x61\x12\xc3\xf5\xc0\x76\x8f\xee\x02\xac\x96\x99\xc9\xd6\xf6\x6b\xd5\x38\xff\xd6\x3e\x9b\x18\xc1\x06\xdf\x27\x94\x85\x03\xe5\xfc\x78\xd7\x7c\xaa\x72\xe4\x0d\x1a\xa5\xb1\xf9\x2d\xab\x41\x82\x0d\x76\xe4\xb1\xec\x8a\xca\x2b\x12\xad\x28\xf6\xdc\xeb\x58\x55\x61\xf8\x8d\xf0\x29\x00\xc9\xa0\x01\x89\x33\x38\x18\x88\x42\x65\x22\x0d\xd0\x73\x64\x9a\xb5\x61\x61\xa8\x58\xca\x79\x20\xb9\x09\xb4\xca\xcd\x9e\x3d\x21\x31\xb5\x8a\xa4\xcd\x5b\xc6\xdc\x45\x97\x0d\xd3\x85\xfc\x0a\x4d\x11\xf0\x1e\x14\x8e\x5a\x26\xc8\x08\x2d\x50\x06\xc8\x35\x6c\x70\xba\x12\x3b\x1c\x4d\x57\xc5\x42\xa7\xe7\x12\xa8\xe0\x4b\x2d\x41\xe3\x66\xd8\x35\x16\xb1\xd0\x99\x5d\x2c\x84\xa8\x4f\x5d\x9f\x68\x81\xbd\x6c\x0d\x3e\x3d\x1d\x93\x7f\x4f\xb1\xb6\xf2\x78\x5c\x94\x4f\x5e\x71\x98\x7e\x49\x3e\x1b\x72\x92\x0a\xa3\x42\xd2\x0f\x02\xcb\x0f\xdd\x52\x0e\x9b\x27\xce\xaf\x5e\xc0\x73\x4d\x1a\xf8\x51\x04\xc0\x06\x45\x32\xd3\x7a\x69\x4f\xf6\x3c\x51\x3c\x3b\x48\xc6\xdf\xab\x97\x93\x13\xc7\x8d\xe5\x87\x93\xe6\xb1\xad\xe4\x1a\xcc\x68\xf9\x53\xb7\xcc\x95\x89\x87\x41\x7a\x74\x47\x8b\x7e\xc6\x41\xa8\x96\x37\x1e\x5a\x01\xe6\x04\x16\xa0\x1b\x53\xcf\x56\x5c\xb5\x77\x22\x96\x0e\x96\xcd\x9f\x6d\x9d\xa8\x9f\x3d\x5b\x15\x35\xf2\xee\x55\x49\xa3\xa8\x8f\x4b\xe0\xc4\x9e\x60\x4f\x67\xa8\x6d\x76\x6b\x60\x19\x14\xb5\x18\xe9\x18\x7d\xa8\xfb\xfd\xa4\x32\x2b\xef\x55\x6d\xd6\xe8\x53\x7d\x1f\x74\xfb\x49\x83\x21\x86\x39\xea\xee\x2c\x03\x68\x3f\x21\xab\x6d\x5d\x38\x11\xb4\x3a\xa6\xbc\x83\xf5\x0d\xa2\x97\x29\x95\x24\xed\x39\x8d\xd8\x24\x68\x91\xe8\x38\xd1\x43\x61\x40\xe2\x8e\xf6\xba\xb0\xa7\xe6\x40\x4f\xb3\xa4\x93\xd2\xf6\x8d\xf4\xdc\xcb\xfb\x28\x59\xdb\xdb\x67\x0e\x3b\x2d\xb2\x37\x77\xe5\xbd\xfa\xcd\x47\x0e\x24\xf0\xe6\x09\x80\x36\x11\x62\x04\x74\x90\x97\xac\x59\xf2\x38\x54\xe7\x31\xe8\xed\xcb\xed\x08\x58\x2e\x7f\x1a\x11\xb6\x12\x39\x48\x5c\x89\x6a\x9e\x77\x18\x67\xa8\x66\x40\xe7\x35\x53\xa8\x49\xdb\xa7\xba\xea\xf8\x6a\x76\xd1\x2a\xbc\xe1\x06\x5f\xff\x99\xc2\xa3\x25\xf6\x3d\xee\xbd\xf7\xb2\x35\x79\x44\xfa\xfd\x93\x48\xbc\x69\x2c\xdd\xf9\xb7\x27\xf8\x3e\x8b\x58\x30\x51\x2a\x4a\x9b\x8e\x6b\xd5\x7e\x81\xcd\xdd\x10\x5f\xa6\xb3\x48\xcf\x98\x0b\x59\x7d\xe1\x6e\xb9\xe9\x1a\xdc\x07\x11\x2f\xf1\x07\x4a\xb9\xb5\xb9\xec\xc1\x8a\xf2\x10\x34\xfc\x48\x19\xce\xf9\x5a\x54\x5e\x69\x89\x58\x7c\x64\x62\xda\x12\x9f\xf0\x14\xcf\x1b\xf3\xef\xeb\x9b\xff\x0b\x00\x00\xff\xff\x5f\x47\x5c\x03\x72\x7d\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x4d, 0x2d, 0x75, 0x7d, 0x9c, 0x23, 0xa9, 0xa6, 0x78, 0xe7, 0xd6, 0x93, 0xa0, 0x33, 0x26, 0xc5, 0xeb, 0x9, 0x2a, 0xb4, 0xac, 0x4a, 0xe, 0xff, 0xaa, 0x17, 0xb, 0xfc, 0x3c, 0x2a, 0x41}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
